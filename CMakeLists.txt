cmake_minimum_required( VERSION 2.8 )
project( tress CXX )
include( ../yaal/_aux/cmakelib.cmake )

if ( NOT ( "$ENV{BOOST_INSTALL_PATH}" STREQUAL "" ) )
	set( BOOST_ROOT "$ENV{BOOST_INSTALL_PATH}" )
elseif ( NOT ( "${BOOST_INSTALL_PATH}" STREQUAL "" ) )
	set( BOOST_ROOT "${BOOST_INSTALL_PATH}" )
endif()

use_cxx_compiler_flag( -Wno-missing-noreturn )
find_package( Boost COMPONENTS filesystem date_time system REQUIRED )
find_package( yaal COMPONENTS hcore tools dbwrapper hconsole REQUIRED )

include_directories( . )
configure_file( ../yaal/_aux/cmake-client-config.hxx ${TARGET_PATH}/config.hxx )

file( GLOB SRCS ./src/*.cxx )
file( GLOB HDRS ./src/*.hxx )
file( GLOB CHILD_SRCS ./child/*.cxx )
file( GLOB CHILD_HDRS ./child/*.hxx )
file( GLOB TUT ./TUT/*.hpp )
add_executable( ${PROJECT_NAME} ${SRCS} ${HDRS} ../yaal/_aux/cmake-client-config.hxx )
add_executable( child ${CHILD_SRCS} ${CHILD_HDRS} )
add_library( tressplugin MODULE data/plugin.cxx )
add_library( TUT ${TUT} )
set_target_properties( ${PROJECT_NAME} PROPERTIES LINKER_LANGUAGE CXX OUTPUT_NAME 1exec RUNTIME_OUTPUT_DIRECTORY_DEBUG ${TARGET_PATH}/tress RUNTIME_OUTPUT_DIRECTORY_DEBUG ${TARGET_PATH}/tress RUNTIME_OUTPUT_DIRECTORY_RELEASE ${TARGET_PATH}/tress RUNTIME_OUTPUT_DIRECTORY_COV ${TARGET_PATH}/tress RUNTIME_OUTPUT_DIRECTORY_PROF ${TARGET_PATH}/tress )
set_target_properties( child PROPERTIES LINKER_LANGUAGE CXX OUTPUT_NAME 1exec RUNTIME_OUTPUT_DIRECTORY ${TARGET_PATH}/child RUNTIME_OUTPUT_DIRECTORY_DEBUG ${TARGET_PATH}/child RUNTIME_OUTPUT_DIRECTORY_RELEASE ${TARGET_PATH}/child RUNTIME_OUTPUT_DIRECTORY_COV ${TARGET_PATH}/child RUNTIME_OUTPUT_DIRECTORY_PROF ${TARGET_PATH}/child )
set_target_properties( TUT PROPERTIES LINKER_LANGUAGE CXX )
set_target_properties( tressplugin PROPERTIES LINKER_LANGUAGE CXX )
if ( CMAKE_HOST_WIN32 )
	add_executable( child-simple ${CMAKE_HOME_DIRECTORY}/data/child.cxx )
	set_target_properties( child-simple PROPERTIES LINKER_LANGUAGE CXX OUTPUT_NAME child RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_HOME_DIRECTORY}/data )
	set_target_properties( tressplugin PROPERTIES OUTPUT_NAME tressplugin${LIB_INFIX} LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_HOME_DIRECTORY}/data )
	set_target_properties( child PROPERTIES COMPILE_DEFINITIONS "_SIGNAL_H=1" )
	set_source_files_properties( ${CHILD_SRCS} COMPILE_FLAGS "/FIglibc/bits/signum.h" )
	target_link_libraries( ${PROJECT_NAME} ${yaal_LIBRARIES} libintl )
	target_link_libraries( child ${yaal_LIBRARIES} libintl )
	include_external_msproject( makedef ../yaal/makedef.vcproj )
	include_external_msproject( mkheaders ../yaal/mkheaders.vcproj )
	include_external_msproject( msvcxx ../yaal/msvcxx.vcproj )
	include_external_msproject( hcore ../yaal/hcore.vcproj msvcxx makedef )
	include_external_msproject( tools ../yaal/tools.vcproj hcore )
	include_external_msproject( dbwrapper ../yaal/dbwrapper.vcproj tools )
	include_external_msproject( hconsole ../yaal/hconsole.vcproj tools )
	include_external_msproject( hdata ../yaal/hdata.vcproj dbwrapper hconsole )
	include_external_msproject( INSTALL ../yaal/INSTALL.vcproj hdata mkheaders )
	add_dependencies( tress INSTALL )
	add_dependencies( tressplugin INSTALL )
else()
	set_target_properties( tressplugin PROPERTIES OUTPUT_NAME 1exec PREFIX "" SUFFIX "" LIBRARY_OUTPUT_DIRECTORY ${TARGET_PATH}/tressplugin LIBRARY_OUTPUT_DIRECTORY_DEBUG ${TARGET_PATH}/tressplugin LIBRARY_OUTPUT_DIRECTORY_RELEASE ${TARGET_PATH}/tressplugin LIBRARY_OUTPUT_DIRECTORY_COV ${TARGET_PATH}/tressplugin LIBRARY_OUTPUT_DIRECTORY_PROF ${TARGET_PATH}/tressplugin )
	target_link_libraries( ${PROJECT_NAME} ${yaal_LIBRARIES} ${Boost_LIBRARIES} )
	target_link_libraries( child ${yaal_LIBRARIES} )
endif()

