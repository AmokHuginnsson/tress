/*
 * EXPECTED:["ctr:main-scope:1", "ctr:if-control:1", "ctr:if-scope:1", "dtr:if-scope:1", "dtr:if-control:1", "ctr:between-ifs:1", "ctr:if-control:1", "ctr:else-scope:1", "dtr:else-scope:1", "dtr:if-control:1", "ctr:first:1", "ctr:for-scope:1", "ctr:second:1", "ctr:for-scope:1", "dtr:for-scope:1", "dtr:first:1", "dtr:for-scope:1", "dtr:second:1", "ctr:while-control:1", "ctr:while-scope:1", "ctr:while-control:1", "dtr:while-control:1", "ctr:while-scope:1", "dtr:while-scope:1", "ctr:while-control:1", "dtr:while-control:1", "dtr:while-scope:1", "dtr:while-control:1", "ctr:switch-control:1", "ctr:case-scope:1", "dtr:case-scope:1", "dtr:switch-control:1", "ctr:main-scope:0", "ctr:if-control:0", "ctr:if-scope:0", "dtr:if-scope:0", "dtr:if-control:0", "ctr:between-ifs:0", "ctr:if-control:0", "ctr:else-scope:0", "dtr:else-scope:0", "dtr:if-control:0", "ctr:first:0", "ctr:for-scope:0", "ctr:second:0", "ctr:for-scope:0", "dtr:for-scope:0", "dtr:first:0", "dtr:for-scope:0", "dtr:second:0", "ctr:while-control:0", "ctr:while-scope:0", "ctr:while-control:0", "dtr:while-control:0", "ctr:while-scope:0", "dtr:while-scope:0", "ctr:while-control:0", "dtr:while-control:0", "dtr:while-scope:0", "dtr:while-control:0", "ctr:switch-control:0", "ctr:case-scope:0", "dtr:case-scope:0", "dtr:switch-control:0", "ctr:level-0:0", "ctr:level-1a:0", "ctr:level-a2a:0", "dtr:level-a2a:0", "ctr:level-a2b:0", "dtr:level-a2b:0", "dtr:level-1a:0", "ctr:level-1b:0", "ctr:level-b2a:0", "dtr:level-b2a:0", "ctr:level-b2b:0", "dtr:level-b2b:0", "dtr:level-1b:0", "dtr:level-0:0", "ctr:level-0:0", "ctr:level-1a:0", "ctr:level-a1a:0", "dtr:level-a1a:0", "ctr:level-a1b:0", "dtr:level-a1b:0", "dtr:level-1a:0", "ctr:level-1b:0", "ctr:level-b1a:0", "dtr:level-b1a:0", "ctr:level-b1b:0", "dtr:level-b1b:0", "dtr:level-1b:0", "dtr:level-0:0", "dtr:between-ifs:0", "dtr:main-scope:0", "ctr:level-0:1", "ctr:level-1a:1", "ctr:level-a2a:1", "dtr:level-a2a:1", "ctr:level-a2b:1", "dtr:level-a2b:1", "dtr:level-1a:1", "ctr:level-1b:1", "ctr:level-b2a:1", "dtr:level-b2a:1", "ctr:level-b2b:1", "dtr:level-b2b:1", "dtr:level-1b:1", "dtr:level-0:1", "ctr:level-0:1", "ctr:level-1a:1", "ctr:level-a1a:1", "dtr:level-a1a:1", "ctr:level-a1b:1", "dtr:level-a1b:1", "dtr:level-1a:1", "ctr:level-1b:1", "ctr:level-b1a:1", "dtr:level-b1a:1", "ctr:level-b1b:1", "dtr:level-b1b:1", "dtr:level-1b:1", "dtr:level-0:1", "dtr:between-ifs:1", "dtr:main-scope:1"]
 */
import Algorithms as algo;

class ScopeTracer {
	_log = none;
	_name = none;
	_nest = -1;
	constructor( log_, name_, nest_ ) {
		_name = name_;
		_log = log_;
		_nest = nest_;
		_log.push( "ctr:{}:{}".format( _name, _nest ) );
	}
	destructor() {
		_log.push( "dtr:{}:{}".format( _name, _nest ) );
	}
	id() {
		return ( "{}:{}".format( _name, _nest ) );
	}
	pass( value_ ) {
		return ( value_ );
	}
}

fun( log_, nest_ ) {
	st = ScopeTracer;
	mainScope = st( log_, "main-scope", nest_ );
	if ( ( ifControl = st( log_, "if-control", nest_ ) ).pass( true ) ) {
		ifScope = st( log_, "if-scope", nest_ );
		assert( ifScope.id() == "if-scope:{}".format( nest_ ) );
		assert( ifControl.id() == "if-control:{}".format( nest_ ) );
	}
	betweenIfs = st( log_, "between-ifs", nest_ );
	if ( ( ifControl = st( log_, "if-control", nest_ ) ).pass( false ) ) {
	} else {
		elseScope = st( log_, "else-scope", nest_ );
		assert( elseScope.id() == "else-scope:{}".format( nest_ ) );
		assert( ifControl.id() == "if-control:{}".format( nest_ ) );
	}
	for ( forControl : algo.map( [ "first", "second" ], @[log_, st, nest_]( x ) { st( log_, x, nest_ ); } ) ) {
		forScope = st( log_, "for-scope", nest_ );
		assert( forScope.id() == "for-scope:{}".format( nest_ ) );
	}
	i = 0;
	while ( ( whileControl = st( log_, "while-control", nest_ ) ).pass( i < 2 ) ) {
		whileScope = st( log_, "while-scope", nest_ );
		assert( whileScope.id() == "while-scope:{}".format( nest_ ) );
		assert( whileControl.id() == "while-control:{}".format( nest_ ) );
		i += 1;
	}
	switch ( ( switchControl = st( log_, "switch-control", nest_ ) ).id()[0] ) {
		case ( 's' ): {
			caseScope = st( log_, "case-scope", nest_ );
			assert( caseScope.id() == "case-scope:{}".format( nest_ ) );
			assert( switchControl.id() == "switch-control:{}".format( nest_ ) );
		} break;
	}
	if ( nest_ > 0 ) {
		fun( log_, nest_ - 1 );
	}
	/* level 0 */ {
		level0 = st( log_, "level-0", nest_ );
		/* level 1a */ {
			level1a = st( log_, "level-1a", nest_ );
			/* level a2a */ {
				levela2a = st( log_, "level-a2a", nest_ );
				assert( levela2a.id() == "level-a2a:{}".format( nest_ ) );
			}
			/* level a2b */ {
				levela2b = st( log_, "level-a2b", nest_ );
				assert( levela2b.id() == "level-a2b:{}".format( nest_ ) );
			}
			assert( level1a.id() == "level-1a:{}".format( nest_ ) );
		}
		/* level 1b */ {
			level1b = st( log_, "level-1b", nest_ );
			/* level b2a */ {
				levelb2a = st( log_, "level-b2a", nest_ );
				assert( levelb2a.id() == "level-b2a:{}".format( nest_ ) );
			}
			/* level b2b */ {
				levelb2b = st( log_, "level-b2b", nest_ );
				assert( levelb2b.id() == "level-b2b:{}".format( nest_ ) );
			}
			assert( level1b.id() == "level-1b:{}".format( nest_ ) );
		}
		assert( level0.id() == "level-0:{}".format( nest_ ) );
	}
	/* level 0 */ {
		level0 = st( log_, "level-0", nest_ );
		/* level 1a */ {
			level1 = st( log_, "level-1a", nest_ );
			/* level a2a */ {
				level2 = st( log_, "level-a1a", nest_ );
				assert( level2.id() == "level-a1a:{}".format( nest_ ) );
			}
			/* level a2b */ {
				level2 = st( log_, "level-a1b", nest_ );
				assert( level2.id() == "level-a1b:{}".format( nest_ ) );
			}
			assert( level1.id() == "level-1a:{}".format( nest_ ) );
		}
		/* level 1b */ {
			level1 = st( log_, "level-1b", nest_ );
			/* level b2a */ {
				level2 = st( log_, "level-b1a", nest_ );
				assert( level2.id() == "level-b1a:{}".format( nest_ ) );
			}
			/* level b2b */ {
				level2 = st( log_, "level-b1b", nest_ );
				assert( level2.id() == "level-b1b:{}".format( nest_ ) );
			}
			assert( level1.id() == "level-1b:{}".format( nest_ ) );
		}
		assert( level0.id() == "level-0:{}".format( nest_ ) );
	}
	assert( betweenIfs.id() == "between-ifs:{}".format( nest_ ) );
	assert( mainScope.id() == "main-scope:{}".format( nest_ ) );
	return ( log_ );
}

main() {
	return ( fun( [], 1 ) );
}

