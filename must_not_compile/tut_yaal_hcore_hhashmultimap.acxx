/* Read tress/LICENSE.md file for copyright and licensing information. */

#include <yaal/hcore/hhashmultimap.hxx>
M_VCSID ( "$Id$" )

using namespace yaal;
using namespace yaal::hcore;

#ifndef MAKE_DEP

namespace must_not_compile {

typedef HHashMultiMap<
	int,
	int,
	HHashMultiMap<int, int>::hasher_type,
	HHashMultiMap<int, int>::equal_key_type,
	HHashMultiMap<int, int>::allocator_type,
	HMultiContainerStorage::HPacked
> mapp_t;
typedef HHashMultiMap<
	int,
	int,
	HHashMultiMap<int, int>::hasher_type,
	HHashMultiMap<int, int>::equal_key_type,
	HHashMultiMap<int, int>::allocator_type,
	HMultiContainerStorage::HTransparent
> mapt_t;

#if defined ( BUG_0 )

template<typename mm_t>
int sum( mm_t const& m ) {
	int l_iSum = 0;

	for ( typename mm_t::iterator it = m.begin(); it != m.end(); ++ it ) /* MUST_FAIL_HERE */
		l_iSum += (*it).second;
	return ( l_iSum );
}

#elif defined ( BUG_1 )

template<typename mm_t>
int sum( mm_t const& m ) {
	int l_iSum = 0;

	for ( typename mm_t::const_iterator it = m.begin(); it != m.end(); ++ it )
		(*it).second = 0; /* MUST_FAIL_HERE */
	return ( l_iSum );
}

#elif defined ( BUG_2 )

template<typename mm_t>
int sum( mm_t const& m ) {
	int l_iSum = 0;

	for ( typename mm_t::const_iterator it = m.begin(); it != m.end(); ++ it )
		it->second = 0; /* MUST_FAIL_HERE */
	return ( l_iSum );
}

#elif defined ( BUG_3 )

template<typename mm_t>
int sum( mm_t const& l ) {
	typename mm_t::reverse_iterator rit( l.begin() ); /* MUST_FAIL_HERE */
	return ( 0 );
}

#elif defined ( BUG_4 )

template<typename mm_t>
int sum( mm_t const& l ) {
	typename mm_t::const_reverse_iterator rit( l.begin() );
	*rit = 0; /* MUST_FAIL_HERE */
	return ( 0 );
}

#else
#	error NO_SUCH_BUG
template<typename mm_t>
int sum( mm_t const& m ) {
	return ( 0 );
}
#endif

}

int main( int, char** ) {
	must_not_compile::mapp_t mp;
	mp.insert( make_pair( 1, 7 ) );
	mp.insert( make_pair( 3, 11 ) );
	mp.insert( make_pair( 5, 13 ) );
	must_not_compile::mapt_t mt;
	mt.insert( make_pair( 1, 7 ) );
	mt.insert( make_pair( 3, 11 ) );
	mt.insert( make_pair( 5, 13 ) );
	return ( must_not_compile::sum( mp ) + must_not_compile::sum( mt ) );
}

#endif /* #ifndef MAKE_DEP */

/* vim: set ft=cpp: */
