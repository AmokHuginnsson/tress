#! /usr/bin/env python2.5

import sys

class Uber( object ):
	__name = "Unnamed"
	def __init__( self, name = None ):
		if ( name != None ):
			self.__name = name
		print "An instance of class " + Uber.__name__ + " named `" + self.__name + "' created."

	def __del__( self ):
		print "An instance of class " + Uber.__name__ + " named `" + self.__name + "' destroyed."

	def __repr__( self ):
		return self.__class__.__name__ + "(" + self.__name + ")"

	def name( self ):
		return ( self.__name )

	def foo( self, *argv, **keywords ):
		for arg in argv:
			print arg
		for key in keywords:
			print key + "=>" + keywords[key]


class Hyper( Uber ):
	def __init__( self, name = None ):
		super( Hyper, self ).__init__( name )
		print "An instance of class " + Hyper.__name__ + " named `" + super( Hyper, self ).name() + "' created."

	def __del__( self ):
		print "An instance of class " + Hyper.__name__ + " named `" + self.name() + "' destroyed."
		super( Hyper, self ).__del__()


"""
Lets learn something about python programming.

def learn():
	print "Program starts here."
	a = Hyper( "core" )
	print a
	a.foo( 1, "ala", 3.14159265, first = "ox" )
	print "Program ends here."
"""

def has_output_opt( opts ):
	has = 0
	for opt in opts:
		if ( has == 1 ):
			has += 1
		if ( opt == "-o" ):
			has = 1
	return ( 1 if ( has == 2 ) else 0 )

def get_output_path( opts ):
	has = 0
	output_path = ""
	for opt in opts:
		if ( has == 1 ):
			output_path = opt
			break
		if ( opt == "-o" ):
			has = 1
	return output_path

def main():
	if ( has_output_opt( sys.argv ) ):
		print get_output_path( sys.argv )
#	learn()

if __name__ == "__main__":
	main()
